import React, { useState, useEffect } from 'react';
import { useParams, useLocation, useNavigate } from 'react-router-dom';

function QuizResult() {
  const { quizId } = useParams();
  const location = useLocation();
  const navigate = useNavigate();

  const [quiz, setQuiz] = useState(null);
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(true);

  const { answers, totalQuestions, completionRate, timeSpent } = location.state || {};

  useEffect(() => {
    const mockQuiz = {
      id: quizId,
      title: 'B·∫°n thu·ªôc nh√≥m t√≠nh c√°ch n√†o?',
      questions: [
        {
          id: 1,
          question: 'Khi tham gia m·ªôt b·ªØa ti·ªác, b·∫°n th∆∞·ªùng:',
          type: 'single',
          options: [
            'Ch·ªß ƒë·ªông l√†m quen v·ªõi nhi·ªÅu ng∆∞·ªùi m·ªõi',
            'Ch·ªâ n√≥i chuy·ªán v·ªõi m·ªôt v√†i ng∆∞·ªùi quen',
            'T√¨m g√≥c y√™n tƒ©nh ƒë·ªÉ quan s√°t',
            'R·ªùi ƒëi s·ªõm v√¨ c·∫£m th·∫•y m·ªát m·ªèi'
          ]
        },
        {
          id: 2,
          question: 'B·∫°n th√≠ch h·ªçc h·ªèi th√¥ng qua:',
          type: 'single',
          options: [
            'ƒê·ªçc s√°ch v√† t√†i li·ªáu',
            'Th·ª±c h√†nh tr·ª±c ti·∫øp',
            'Th·∫£o lu·∫≠n v·ªõi ng∆∞·ªùi kh√°c',
            'Xem video v√† h√¨nh ·∫£nh'
          ]
        },
      ]
    };

    const calculateResult = () => {
      if (!answers) return null;

      const personalityTypes = {
        extrovert: { count: 0, label: 'H∆∞·ªõng ngo·∫°i', description: 'B·∫°n l√† ng∆∞·ªùi nƒÉng ƒë·ªông, th√≠ch giao ti·∫øp v√† l√†m vi·ªác v·ªõi nhi·ªÅu ng∆∞·ªùi.' },
        introvert: { count: 0, label: 'H∆∞·ªõng n·ªôi', description: 'B·∫°n l√† ng∆∞·ªùi th√≠ch suy ng·∫´m, l√†m vi·ªác ƒë·ªôc l·∫≠p v√† c·∫ßn th·ªùi gian ri√™ng.' },
        thinking: { count: 0, label: 'L√Ω tr√≠', description: 'B·∫°n ƒë∆∞a ra quy·∫øt ƒë·ªãnh d·ª±a tr√™n logic v√† ph√¢n t√≠ch kh√°ch quan.' },
        feeling: { count: 0, label: 'C·∫£m x√∫c', description: 'B·∫°n quy·∫øt ƒë·ªãnh d·ª±a tr√™n c·∫£m x√∫c v√† t√°c ƒë·ªông ƒë·∫øn con ng∆∞·ªùi.' }
      };

      Object.entries(answers).forEach(([questionId, answerIndex]) => {
        const qId = parseInt(questionId);
        if ([1, 5, 11, 14, 19].includes(qId)) {
          if ([0, 2, 3].includes(answerIndex)) {
            personalityTypes.extrovert.count++;
          } else {
            personalityTypes.introvert.count++;
          }
        }
        if ([3, 7, 13, 15, 20].includes(qId)) {
          if ([0, 2].includes(answerIndex)) {
            personalityTypes.thinking.count++;
          } else {
            personalityTypes.feeling.count++;
          }
        }
      });

      const dominantType = Object.entries(personalityTypes).reduce(
        (max, [key, value]) => value.count > max.count ? { key, ...value } : max,
        { key: 'balanced', count: 0, label: 'C√¢n b·∫±ng', description: 'B·∫°n c√≥ s·ª± c√¢n b·∫±ng gi·ªØa c√°c ƒë·∫∑c ƒëi·ªÉm t√≠nh c√°ch.' }
      );

      return {
        personalityType: dominantType,
        breakdown: personalityTypes,
        score: Math.round((Object.keys(answers).length / totalQuestions) * 100)
      };
    };

    setTimeout(() => {
      setQuiz(mockQuiz);
      setResult(calculateResult());
      setLoading(false);
    }, 1000);
  }, [quizId, answers, totalQuestions]);

  const formatTime = (seconds) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes} ph√∫t ${remainingSeconds} gi√¢y`;
  };

  const handleRetake = () => {
    navigate(`/quiz/${quizId}/take`);
  };

  const handleSendEmail = () => {
    const subject = encodeURIComponent(`K·∫øt qu·∫£ Quiz: ${quiz?.title}`);
    const body = encodeURIComponent(`
Ch√†o b·∫°n,

T√¥i v·ª´a ho√†n th√†nh b√†i quiz "${quiz?.title}" v·ªõi k·∫øt qu·∫£ sau:

üéØ Nh√≥m t√≠nh c√°ch: ${result?.personalityType.label}
üìä ƒêi·ªÉm s·ªë: ${result?.score}%
üìã S·ªë c√¢u tr·∫£ l·ªùi: ${Object.keys(answers).length}/${totalQuestions}
‚è±Ô∏è Th·ªùi gian: ${formatTime(timeSpent)}

üìù M√¥ t·∫£: ${result?.personalityType.description}

Tr√¢n tr·ªçng!
    `);

    window.open(`mailto:?subject=${subject}&body=${body}`, '_blank');
  };

  const handleDownloadPDF = () => {
    const content = `
      <div style="font-family: Arial, sans-serif; padding: 20px; max-width: 800px; margin: 0 auto;">
        <h1 style="text-align: center; color: #333; border-bottom: 2px solid #007bff; padding-bottom: 10px;">
          K·∫øt qu·∫£ Quiz: ${quiz?.title}
        </h1>
        <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h2 style="color: #007bff; text-align: center;">Nh√≥m t√≠nh c√°ch: ${result?.personalityType.label}</h2>
          <p style="text-align: center; font-size: 18px; margin: 10px 0;">ƒêi·ªÉm s·ªë: ${result?.score}%</p>
          <p style="text-align: center; color: #666;">${result?.personalityType.description}</p>
        </div>
        <div style="margin: 20px 0;">
          <h3>Th·ªëng k√™ b√†i l√†m:</h3>
          <ul>
            <li>C√¢u ƒë√£ tr·∫£ l·ªùi: ${Object.keys(answers).length}/${totalQuestions}</li>
            <li>T·ª∑ l·ªá ho√†n th√†nh: ${Math.round(completionRate)}%</li>
            <li>Th·ªùi gian l√†m b√†i: ${formatTime(timeSpent)}</li>
          </ul>
        </div>
        <div style="margin: 20px 0;">
          <h3>Chi ti·∫øt c√¢u tr·∫£ l·ªùi:</h3>
          ${quiz?.questions.map((question, index) => `
            <div style="margin-bottom: 15px; padding: 10px; border-left: 4px solid #007bff;">
              <strong>C√¢u ${index + 1}:</strong> ${question.question}<br>
              <span style="color: ${answers[question.id] !== undefined ? '#28a745' : '#6c757d'};">
                ${answers[question.id] !== undefined 
                  ? `‚úì ${question.options[answers[question.id]]}` 
                  : '‚ö™ Ch∆∞a tr·∫£ l·ªùi'}
              </span>
            </div>
          `).join('')}
        </div>
        <footer style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #ddd; color: #666;">
          <p>T·∫°o b·ªüi Quiz App - ${new Date().toLocaleDateString('vi-VN')}</p>
        </footer>
      </div>
    `;

    const printWindow = window.open('', '_blank');
    printWindow.document.write(`
      <html>
        <head>
          <title>K·∫øt qu·∫£ Quiz - ${quiz?.title}</title>
          <style>
            @media print {
              body { margin: 0; }
              @page { margin: 1in; }
            }
          </style>
        </head>
        <body>${content}</body>
      </html>
    `);
    printWindow.document.close();
    printWindow.print();
  };

  const handleBackToHome = () => {
    navigate('/');
  };

  if (!answers || !totalQuestions) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center px-4">
        <div className="text-center max-w-md">
          <h2 className="text-2xl font-bold text-gray-800">Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£</h2>
          <p className="text-gray-600 mt-2">Vui l√≤ng l√†m b√†i quiz tr∆∞·ªõc khi xem k·∫øt qu·∫£.</p>
          <button 
            onClick={() => navigate(`/quiz/${quizId}`)}
            className="mt-4 bg-primary hover:bg-darkPrimary text-white px-6 py-2 rounded-lg"
          >
            Quay l·∫°i
          </button>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex justify-center items-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-primary mx-auto"></div>
          <p className="mt-4 text-gray-600">ƒêang t√≠nh to√°n k·∫øt qu·∫£...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8 px-4 max-w-4xl mx-auto">
      <div className="text-center mb-6">
        <h1 className="text-2xl font-bold text-gray-800 mb-1">K·∫øt qu·∫£ b√†i l√†m</h1>
        <p className="text-gray-600 text-sm">{quiz?.title}</p>
      </div>

      <div className="bg-white rounded-xl shadow-lg p-6 mb-4">
        <div className="text-center mb-6">
          <div className="inline-flex items-center justify-center w-20 h-20 bg-primary bg-opacity-10 rounded-full mb-3">
            <span className="text-xl font-bold text-primary">{result?.score}%</span>
          </div>
          <h2 className="text-xl font-bold text-gray-800 mb-2">
            Nh√≥m t√≠nh c√°ch: {result?.personalityType.label}
          </h2>
          <p className="text-gray-600 leading-relaxed max-w-xl mx-auto text-sm">
            {result?.personalityType.description}
          </p>
        </div>

        <div className="grid md:grid-cols-2 gap-4 mb-6">
          <div className="bg-blue-50 rounded-lg p-4">
            <h3 className="font-semibold text-blue-800 mb-2 text-sm">Ph√¢n t√≠ch t√≠nh c√°ch</h3>
            <div className="space-y-2">
              {Object.entries(result?.breakdown || {}).map(([key, data]) => (
                <div key={key} className="flex items-center justify-between">
                  <span className="text-blue-700 text-sm">{data.label}</span>
                  <div className="flex items-center">
                    <div className="w-16 h-2 bg-blue-200 rounded-full mr-2">
                      <div 
                        className="h-2 bg-blue-500 rounded-full"
                        style={{ width: `${(data.count / Math.max(...Object.values(result?.breakdown).map(d => d.count))) * 100 || 0}%` }}
                      ></div>
                    </div>
                    <span className="text-xs text-blue-600 font-medium">{data.count}</span>
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="bg-green-50 rounded-lg p-4">
            <h3 className="font-semibold text-green-800 mb-2 text-sm">Th·ªëng k√™ b√†i l√†m</h3>
            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <span className="text-green-700 text-sm">C√¢u ƒë√£ tr·∫£ l·ªùi</span>
                <span className="font-medium text-green-800 text-sm">{Object.keys(answers).length}/{totalQuestions}</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-green-700 text-sm">T·ª∑ l·ªá ho√†n th√†nh</span>
                <span className="font-medium text-green-800 text-sm">{Math.round(completionRate)}%</span>
              </div>
              <div className="flex justify-between items-center">
                <span className="text-green-700 text-sm">Th·ªùi gian l√†m b√†i</span>
                <span className="font-medium text-green-800 text-sm">{formatTime(timeSpent)}</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
        <button onClick={handleRetake} className="bg-primary hover:bg-darkPrimary text-white font-medium px-4 py-3 rounded-lg text-sm">
          L√†m l·∫°i
        </button>
        <button onClick={handleSendEmail} className="bg-blue-600 hover:bg-blue-700 text-white font-medium px-4 py-3 rounded-lg text-sm">
          G·ª≠i Gmail
        </button>
        <button onClick={handleDownloadPDF} className="bg-red-600 hover:bg-red-700 text-white font-medium px-4 py-3 rounded-lg text-sm">
          T·∫£i PDF
        </button>
        <button onClick={handleBackToHome} className="bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium px-4 py-3 rounded-lg text-sm">
          Trang ch·ªß
        </button>
      </div>
    </div>
  );
}

export default QuizResult;
